module main

import rand
import term.ui

struct Snake_game {
    mut: ui ui.Context
    direction Direction = Direction.right
    points[] Point = [] Point {
        len: 5,
        init: Point {
            1,
            1
        }
    }
    fruit Point
}

struct Pos {
    mut: x int
    y int
}

struct Point {
    x int
    y int
}

enum Direction {
    up
    down
    left
    right
}

fn control_keys(e & ui.Event, x voidptr) {
    mut app := unsafe {
        & Snake_game(x)
    }

    match e.code {
        .up {
            if app.direction != Direction.down {
                app.direction = Direction.up
            }
        }
        .down {
            if app.direction != Direction.up {
                app.direction = Direction.down
            }
        }
        .left {
            if app.direction != Direction.right {
                app.direction = Direction.left
            }
        }
        .right {
            if app.direction != Direction.left {
                app.direction = Direction.right
            }
        }
        .escape {
            exit(0)
        } else {}
    }
}

fn frame(game_ptr voidptr) {
    mut snake_game := unsafe {
        & Snake_game(game_ptr)
    }

    mut width := snake_game.ui.window_width
    mut height := snake_game.ui.window_height

    head := snake_game.points[0]

    if head != snake_game.fruit {
        snake_game.points.delete_last()
    } else {
        snake_game.fruit = Point {
            x: rand.intn(width) or {
                1
            }
            y: rand.intn(height) or {
                1
            }
        }
    }

    mut x := head.x
    mut y := head.y

    if x == 0 || x == width {
        exit(0)
    }

    if y == 0 || y == height {
        exit(0)
    }

    new_point := match snake_game.direction {
        .up {
            Point {
                x,
                y - 1
            }
        }
        .down {
            Point {
                x,
                y + 1
            }
        }
        .left {
            Point {
                x - 1, y
            }
        }
        .right {
            Point {
                x + 1, y
            }
        }
    }

    if new_point in snake_game.points {
        exit(0)
    }

    snake_game.points.prepend(new_point)
    snake_game.ui.clear()
    snake_game.ui.set_bg_color(r: 174, g: 30, b: 90)
    snake_game.ui.draw_point(snake_game.fruit.x, snake_game.fruit.y)
    snake_game.ui.set_cursor_position(0, 0)
    snake_game.ui.set_bg_color(r: 63, g: 81, b: 181)

    for point in snake_game.points {
        snake_game.ui.draw_point(point.x, point.y)
        snake_game.ui.set_cursor_position(0, 0)
    }

    snake_game.ui.reset()
    snake_game.ui.flush()
}

fn main() {
    mut snake_game := & Snake_game {}

    snake_game.ui = ui.init(
        user_data: snake_game event_fn: control_keys window_title: 'Snake Game!'
        frame_fn: frame hide_cursor: true capture_events: true frame_rate: 8
    )

    width := snake_game.ui.window_width
    height := snake_game.ui.window_height

    snake_game.fruit = Point {
        x: rand.intn(width) or {
            1
        }
        y: rand.intn(height) or {
            1
        }
    }

    snake_game.ui.run() ?
}
